import numpy as np
import sys
np.set_printoptions(threshold=sys.maxsize)

nx = 45
n1 = 45
p = 4

z = np.array([[[-1, -1, 1, 1, -1,
               -1, 1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1,
               -1, -1, 1, 1, -1]],
              [[1, 1, 1, 1, 1,
               1, 1, 1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1,
               1, 1, 1, 1, 1,
               1, 1, -1, -1, -1,
               1, 1, -1, -1, -1,
               1, 1, 1, 1, 1,
               1, 1, 1, 1, 1]],
              [[1, 1, 1, 1, 1,
               1, 1, 1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1,
               1, 1, 1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1,
               1, 1, 1, 1, 1,
               1, 1, 1, 1, 1]],
              [[1, 1, -1, 1, 1,
              1, 1, -1, 1, 1,
              1, 1, -1, 1, 1,
              1, 1, 1, 1, 1,
              1, 1, 1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1,
               -1, -1, -1, 1, 1]]])

w = np.zeros((nx, nx))

for i in range(p):
    w = w + np.dot(z[i].T, z[i])

w = w * (1/nx)

for i in range(nx):
    for j in range(nx):
        if i == j: w[i, j] = 0

def testing(v):
    v_previous = np.zeros(n1)

    while not np.array_equal(v, v_previous):
        v_previous = np.copy(v)

        y = np.zeros(n1)

        for i in range(n1):
            for j in range(nx):
                y[i] = y[i] + w[i, j] * v[j]

            if y[i] >= 0: y[i] = 1
            else: y[i] = -1

        v = np.copy(y)

    print("Result: ", v)

#T1 - 1
v = np.array([-1, -1, 1, -1, 1,
            -1, 1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            1, -1, 1, -1, -1,
            -1, -1, -1, -1, -1,
            -1, -1, 1, -1, -1,
            1, -1, 1, 1, 1])
testing(v)

#T2 - 1
v = np.array([-1, -1, -1, -1, -1,
            -1, 1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            -1, -1, 1, 1, -1,
            1, -1, 1, -1, -1,
            -1, -1, 1, -1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, 1, -1])
testing(v)

#T3 - 1
v = np.array([-1, -1, 1, 1, 1,
            -1, 1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, -1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, 1, 1, -1,
            1, -1, 1, 1, 1])
testing(v)

#T1 - 2
v = np.array([1, -1, 1, 1, 1,
               1, 1, 1, 1, -1,
               -1, -1, 1, 1, 1,
               -1, 1, -1, 1, 1,
               1, 1, 1, 1, -1,
               1, 1, 1, -1, -1,
               1, 1, -1, 1, -1,
               1, 1, 1, 1, -1,
               -1, 1, 1, 1, 1])
testing(v)

#T2 - 2
v = np.array([1, 1, 1, 1, -1,
               1, 1, 1, 1, -1,
               1, -1, -1, 1, 1,
               1, -1, -1, 1, 1,
               -1, 1, 1, 1, 1,
               -1, 1, -1, -1, -1,
               -1, 1, -1, -1, -1,
               -1, 1, 1, 1, 1,
               -1, 1, 1, 1, 1])
testing(v)

#T3 - 2
v = np.array([1, 1, 1, 1, -1,
               1, 1, 1, 1, -1,
               -1, -1, -1, 1, -1,
               -1, -1, -1, 1, -1,
               1, 1, 1, 1, -1,
               1, 1, -1, -1, 1,
               1, 1, -1, -1, 1,
               1, 1, 1, 1, -1,
               1, 1, 1, 1, -1])
testing(v)

#T1 - 3
v = np.array([1, -1, 1, -1, 1,
            -1, -1, 1, 1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, 1, -1, -1,
            -1, -1, 1, 1, 1,
            -1, -1, 1, -1, -1,
            -1, 1, -1, -1, -1,
            -1, -1, -1, -1, -1,
            1, -1, 1, -1, 1])
testing(v)

#T2 - 3
v = np.array([-1, -1, 1, -1, -1,
            -1, 1, 1, -1, -1,
            -1, -1, -1, 1, -1,
            -1, 1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, -1, 1,
            -1, -1, -1, 1, -1,
            -1, -1, -1, -1, -1,
            1, 1, 1, 1, 1])
testing(v)

#T3 - 3
v = np.array([-1, -1, -1, -1, 1,
            -1, 1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            1, -1, -1, -1, -1,
            -1, -1, 1, -1, -1,
            -1, -1, -1, -1, -1,
            1, -1, -1, 1, 1])
testing(v)

#T1 - 4
v = np.array([-1, -1, 1, -1, -1,
            -1, 1, 1, 1, 1,
            -1, -1, 1, 1, 1,
            -1, -1, 1, 1, 1,
            -1, -1, 1, 1, 1,
            1, -1, 1, -1, 1,
            -1, -1, -1, -1, 1,
            -1, -1, 1, -1, 1,
            1, -1, 1, 1, -1])
testing(v)

#T2 - 4
v = np.array([1, -1, 1, -1, 1,
            1, 1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, 1, -1,
            1, -1, 1, 1, -1,
            -1, -1, 1, -1, -1,
            1, -1, -1, -1, -1,
            1, -1, 1, -1, -1,
            -1, -1, 1, 1, 1])
testing(v)

#T3 - 4
v = np.array([-1, -1, -1, -1, 1,
            -1, 1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            -1, -1, -1, 1, -1,
            1, -1, -1, -1, -1,
            -1, -1, 1, -1, -1,
            -1, -1, -1, -1, -1,
            1, -1, -1, 1, 1])
testing(v)


